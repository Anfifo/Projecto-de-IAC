;******************************;
;*        Grupo 33:           *;
;* Andre Fonseca     84698    *;
;* Catarina Custodio 84705    *;
;* Isabel Dias       84726    *;
;******************************;


;*************************************************************************************
; Constantes 
;*************************************************************************************

SELECAO_COMBOIO     EQU 8018H
OPERACAO_COMBOIO    EQU 801AH
BARRAS_VELOCIDADE   EQU 8004H	

TECLADO07 EQU 8006H		     		; cada posiCao do bit corresponde a um semaforo 7654 3210
TECLADO8F EQU 8008H		     		; cada posiCao do bit corresponde a um semaforo **** **98
SEMAFOROS EQU 8012H		     		; Os bits 7 a 2 indicam o número do semáforo1. Os bits 1 e 0 indicam a cor

BOTOES_PRESSAO  EQU 800CH			; 1 on, 0 off
AGULHAS         EQU 8016H			; de 7 a 2 numero agulha, 1-0 estado da agulha (01=liga para a esquerda 10=liga para a direita, 00 e 11 indefinido )
ESQUERDA        EQU 01H				; Valor do estado da agulha quando esta em modo "esquerda"
DIREITA         EQU 02H				; Valor do estado da agulha quando esta em modo "direita"

NUMERO_EVENTOS_SENSORES EQU 801CH	;cada evento corresponde a 2 valores no porto na INFORMACAO_SENSORES
INFORMACAO_SENSORES     EQU 801EH
LCD_SUPERIOR  EQU 8000H				;endereCo do LCD superior
LCD_INFERIOR  EQU 8002H				;endereCo do LCD inferior
NAO_HA_EVENTO EQU 0FFFFH            ; indica que não houve passagem por sensor


VERDE    EQU 2H                 	; Valor da cor Verde no semaforo
VERMELHO EQU 1H              		; Valor da cor Vermelha no semaforo
CINZENTO EQU 0H              		; Valor da cor Cinzenta no semaforo

MASCARA_VELOCIDADE_ANTES_DE_VERIFICAR  EQU 0BH
MASCARA_VELOCIDADE_DEPOIS_DE_VERIFICAR EQU 83H

VALOR_ANTERIOR_MOVER_COMBOIOS EQU 0H ; valores atribuidos anteriormente (iniciados a 0)
VALOR_ANTERIOR_SEMAFOROS07    EQU 0H
VALOR_ANTERIOR_SEMAFOROS89    EQU 0H
VALOR_ANTERIOR_AGULHAS        EQU 0H
VALOR_ANTERIOR_SENSOR         EQU 0H

;*****************************************************************************************************************
;Tabelas
;*****************************************************************************************************************
;pilha: usada para o stack point
;estados das agulhas: usada para saber a que estado estao as agulhas no momento presente (apos movimento)
;cores semaforos: usada para saber a que estado/cor estao os semaforos no momento presente(apos mudança de cor)
;valores anteriores: usada para saber qual o valor anteriormente lido para apenas aplicar mudança se for diferente
;******************************************************************************************************************
PLACE     1000H

pilha:		TABLE 100H	      ; espaCo reservado para a pilha (200H bytes, pois sao 100H words)
SP_inicial:				      ; este e o endereCo (1200H) com que o SP deve ser inicializado.
                              ; O 1º end. de retorno será armazenado em 11FEH (1200H-2)

estados_agulhas:              ; tabela para os estados das agulhas (DIREITA e ESQUERDA).
                              ; 00 cinzento, 01 ESQUERDA, 10 DIREITA, 11 amarelo.
    STRING    DIREITA         ; agulha 0
    STRING    DIREITA         ; agulha 1
    STRING    DIREITA         ; agulha 2
    STRING    DIREITA         ; agulha 3

cores_semaforos:              ; tabela para as cores dos semáforos (VERDE, CINZENTO ou VERMELHO).
                              ; 00 cinzento, 01 vermelho, 10 verde, 11 amarelo.
    STRING    VERDE           ; cor do semáforo 0
    STRING    VERDE           ; cor do semáforo 1
    STRING    VERDE           ; cor do semáforo 2
    STRING    VERDE           ; cor do semáforo 3
    STRING    VERDE           ; cor do semáforo 4
    STRING    VERDE           ; cor do semáforo 5
    STRING    VERDE           ; cor do semáforo 6
    STRING    VERDE           ; cor do semáforo 7
    STRING    VERDE           ; cor do semáforo 8
    STRING    VERDE           ; cor do semáforo 9

valores_anteriores:			  ;tabela com os valores anteriores para comparaCao
	
	STRING      VALOR_ANTERIOR_MOVER_COMBOIOS
	STRING      VALOR_ANTERIOR_SEMAFOROS07
	STRING      VALOR_ANTERIOR_SEMAFOROS89
	STRING      VALOR_ANTERIOR_AGULHAS
	STRING      VALOR_ANTERIOR_SENSOR



;******************************************************************************************************
; Programa Principal
;******************************************************************************************************
; Programa para verificar se houve mudança aos comandos de leitura, se sim, entao inicializa-se a rotina 
;******************************************************************************************************
PLACE 0H

MOV SP, SP_inicial
;------------------------------------------------------------------------------------------------------
start:

MOV R0,0H 					         ; contador para aceder a tabela 
MOV R1,valores_anteriores            ; endereço com a tabela dos valores anteriores

;------------------------------------------------------------------------------------------------------
verificar_mudanca_mover_comboios:    ; verificar se houve mudanCa dos valores nos sliders
MOV R2, BARRAS_VELOCIDADE
CALL comparar

CMP R3,R4
JZ verificar_mudanca_semaforos07     ; caso nao haja mudanCa saltamos para o teclado 

MOVB [R1], R3
CALL mover_comboios                  ; caso haja mudanCa chamamos a rotina que trata de mover os comboios

;-------------------------------------------------------------------------------------------------------
verificar_mudanca_semaforos07:       ; verificar se houve mudanCa dos valores do teclado 0 a 7
MOV R2, TECLADO07
CALL comparar

CMP R3,R4
JZ verificar_mudanca_semaforos8F     ; caso nao haja mudanCa saltamos para o teclado 8 a F 

MOVB [R1], R3
CALL semaforos07                     ; caso haja mudanCa chamamos a rotina que trata dos semaforos 0 a 7

;--------------------------------------------------------------------------------------------------------
verificar_mudanca_semaforos8F:       ; verificar se houve mudanCa dos valores no teclado 8 a F

MOV R2, TECLADO8F
CALL comparar

CMP R3,R4
JZ verificar_mudanca_agulhas        ; caso nao haja mudanCa saltamos para os botoes de Pressao

MOVB [R1], R3
CALL semaforos8F                    ; caso haja mudanCa chamamos a rotina que trata dos semaforos 8 e 9

;--------------------------------------------------------------------------------------------------------
verificar_mudanca_agulhas:          ; verificar se houve mudanCa dos valores dos botoes de Pressao
MOV R2, BOTOES_PRESSAO
CALL comparar

CMP R3,R4
JZ verificar_mudanca_sensores       ; caso nao haja mudanCa saltamos para os Sensores

MOVB [R1], R3
CALL agulhas                        ; caso haja mudanCa chamamos a rotina que trata das agulhas


;--------------------------------------------------------------------------------------------------------
verificar_mudanca_sensores:        ; iniciar a leitura dos sensores
MOV R2, NUMERO_EVENTOS_SENSORES
MOV R0, NAO_HA_EVENTO              ;comparar, se for 0FFFFH (NAO HA EVENTO) nao ha evento
CMP R2, R0                         ; se o numero de eventos for zero, nao iniciamos a leitura dos sensores
JZ fim 
CMP R2, 0H
JZ fim

CALL sensores 

fim: JMP start

;**************************************************************************************************************************************
; Rotinas Auxiliares ao Programa Principal
;**************************************************************************************************************************************
; Rotina responsavel por mover para o Registo R3 e R4 os valores do endereço e o valor anterior da tabela respectiva depois comparar
;***************************************************************************************************************************************
comparar:
PUSH R1
PUSH R2

ADD R1,R0           ; soma o contador com o endereço das words para aceder a word desejada
MOVB R3,[R2]        ; move o valor no endereço de que estamos a tratar 
MOVB R4,[R1]        ; move o valor na tabela dos valores anteriores
ADD R0,1H           ; aumenta o contador para aceder ao endereço 2 abaixo na proxima comparaCao (por ser uma word)

POP R2
POP R1
RET

;****************************************************************************************************************************************
; Mover Comboios
;****************************************************************************************************************************************
;Programa responsavel pelo movimento dos comboios consoante a barra de velocidades (slider/R3)
;
;R1: endereço de seleCao de comboios usado para escolher o comboio e operaCao executada (mudar sentido)
;R2: endereço de operaCao comboio usado para escrever a velocidade e sentido do comboio escolhido pela seleCao (R1)
;R3: endereço de barras de velocidades (sliders) de onde lemos qual o comboio (slider superior comboio azul/0) o sentido e velocidade
;R4: registo com o valor da barra de velocidades
;R5: mascara usada para filtrar bits desnecessarios antes de decidir o sentido do comboio
;R6: registo com o valor de barra de velocidades para se usar no calculo do comboio 1 sem alterar o comboio 0
;R7: mascara usada para filtrar bits desncessarios apos calculado o valor que vamos atribuir ao comboio
;*****************************************************************************************************************************************

mover_comboios:
PUSH R0
PUSH R1
PUSH R2
PUSH R3
PUSH R4

MOV R1,SELECAO_COMBOIO
MOV R2,OPERACAO_COMBOIO
MOV R3,BARRAS_VELOCIDADE
MOVB R4,[R3]
MOV R5, MASCARA_VELOCIDADE_ANTES_DE_VERIFICAR
MOV R7, MASCARA_VELOCIDADE_DEPOIS_DE_VERIFICAR



ler_velocidade_e_direcao_comboio1:
MOV R6,R4								;copiar o valor para nao alterarmos este e podermos usar o R4 para calcular a velocidade do comboio 0
SHR R6,4								;shift para a direita para usarmos apenas os bits de maior peso do comboio0 
AND R6, R5								;filtrar com a mascara apenas os bits necessarios
BIT R6, 3								;ler o bit 3 para ver a direcCao dele
JZ ler_velocidade_e_direcao_comboio0	;se o bit for 0, saltamos para o proximo comboio para nao por o sentido negativo

por_sentido_negativo_do_comboio1:
MOV R0, 80H 					
ADD R6, R0								;poe o sentido negativo

ler_velocidade_e_direcao_comboio0:
AND R4, R5
BIT R4, 3					;ler o bit 3 para ver a direcCao dele
JZ escreve_comboio0			;se o bit for zero saltamos para nao por o sentido negativo

por_sentido_negativo_do_comboio0:
MOV R0, 80H 				
ADD R4, R0					;poe o bit a 1 para mudar o sentido


escreve_comboio0: 
AND R6,R7					;limpar os bits nao necessarios
MOV R0,0H					;SelecCao do Comboio 0
MOVB [R1],R0				;escolher o comboio e operacao de mudar sentido
MOVB [R2],R6				;escrever a mudanCa de sentido e velocidade

escreve_comboios1:
AND R4,R7					;limpeza dos bits nao necessarios
MOV R0,10H					;SelecCao do Comboio 1
MOVB [R1],R0				;escolher o comboio e a operacao de mudar sentido
MOVB [R2],R4				;escrever a mudanCa de sentido e velocidade

fim_mover_comboio:
POP R4
POP R3
POP R2
POP R1
POP R0
RET

;**********************************************************************************************************************
; Semaforos de 0 a 8
;**********************************************************************************************************************
; Programa responsavel pela cor dos semaforos de 0 a 7 atraves dos botoes do teclado de 0 a 7 (Verde/Vermelho)
;
; Rotinas Auxiliares: 
; ver_semaforo: calcula o valor a colocar no semaforo 
; proximo_botao: passamos ao proximo botao ao fazer shift do valor para a direita e acrescentamos 1 ao contador
; escrever_semaforo: escreve no semaforo e na tabela os valores do semaforo para mudar a cor
;
; R0: valor no endereCo do teclado07
; R1: le o teclado de 0 a 7
; R2: le o teclado de 8 a F 
; R3: e o endereCo onde vamos escrevever os semaforos
; R4: e um contador que usamos para podermos ver de que semaforo estamos a tratar conforme o numero de shifts feitos
; R5: endereco das tabelas com os valores dos semaforos atuais
; R7: temporario que esta 2 bits a esquerda para estar na posicao do semaforo para se escrever
; R8: valor temporario com o sinal que estava na tabela da cor dos semaforos
;***********************************************************************************************************************

semaforos07:
PUSH R0
PUSH R1
PUSH R2
PUSH R3
PUSH R4

MOV R1, TECLADO07
MOV R3, SEMAFOROS
MOV R4, 0H					; iniciarlizar o contador a 0 
MOVB R0, [R1]				; mover os valores do teclado para R1

CMP R0, 0
JZ fim_semaforos07

ler_botoes07:
BIT R0,0					;testar o bit 0 corresponde a ver se o botao foi carregado 
JNZ mudar_semaforo			;se estiver a 1 o bit o botao foi premido entao vamos mudar a cor
CALL proximo_botao    		;caso contrario passamos ao proximo botao 
JMP ler_botoes07

mudar_semaforo:
CALL ver_semaforo

ver_cor_da_tabela:
MOVB R8, [R5]
CMP R8, VERDE 				;se for verde, muda para vermelho.
JZ por_semaforo_vermelho

por_semaforo_verde:
MOV R8, VERDE
JMP escrever_o_valor_do_semaforo07

por_semaforo_vermelho:
MOV R8, VERMELHO

escrever_o_valor_do_semaforo07:
CALL escrever_semaforo

fim_semaforos07:
POP R4
POP R3
POP R2
POP R1
POP R0
RET

;***************************************************************************************************************************
; Rotinas auxiliares aos Semaforos
;***************************************************************************************************************************
ver_semaforo:
PUSH R4
MOV R5, cores_semaforos		; movemos o endereço das cores_semaforos para o R5
ADD R5, R4					; somamos o numero de bit que contamos para saber o semaforo a qual aceder
MOV R7, R4					; guardar o valor de R4 
SHL R7, 2					; shift em 2 bits do valor de R4 para se poder escrever no semaforo como numero do semaforo
POP R4
RET

proximo_botao:
ADD R4, 1H				    ;incrementar 1 ao contador
SHR R0, 1				    ;rodamos para passar ao proximo bit para testar
RET

escrever_semaforo:
MOVB [R5], R8				;escrever na tabela o sinal decidido 
ADD R7, R8                  ;decide o sinal
MOVB [R3], R7               ;escreve no semaforo
RET


;***************************************************************************************************************************
; Semaforos de 8 a F
;***************************************************************************************************************************
; Programa responsavel por escrever os valores dos semaforos 8 e 9 consoante os botoes 8 e 9 do teclado
;
; Rotinas Auxiliares: 
; ver_semaforo: calcula o valor a colocar no semaforo 
; proximo_botao: passamos ao proximo botao ao fazer shift do valor para a direita e acrescentamos 1 ao contador
; escrever_semaforo: escreve no semaforo e na tabela os valores do semaforo para mudar a cor
;
; R0: valor no endereCo do teclado07
; R1: le o teclado de 0 a 7
; R2: le o teclado de 8 a F 
; R3: e o endereCo onde vamos escrevever os semaforos
; R4: e um contador que usamos para podermos ver de que semaforo estamos a tratar conforme o numero de shifts feitos
; R5: endereco das tabelas com os valores dos semaforos atuais
; R7: temporario que esta 2 bits a esquerda para estar na posicao do semaforo para se escrever
; R8: valor temporario com o sinal que estava na tabela da cor dos semaforos
;****************************************************************************************************************************
semaforos8F:
PUSH R0
PUSH R1
PUSH R2
PUSH R3
PUSH R4

MOV R2, TECLADO8F
MOV R3, SEMAFOROS
MOV R4, 8H                  ; iniciarlizar o contador a 0 
MOVB R0, [R2]               ; mover os valores do teclado para R1

CMP R0, 0
JZ fim_semaforos07

ler_botoes8F:
BIT R0,0					;testar o bit 0 corresponde a ver se o botao foi carregado 
JNZ mudar_semaforo8F			;se estiver a 1 o bit o botao foi premido entao vamos mudar a cor
CALL proximo_botao    		;caso contrario passamos ao proximo botao 
JMP ler_botoes8F

mudar_semaforo8F:
CALL ver_semaforo

ver_cor_da_tabela8F:
MOVB R8, [R5]
CMP R8, CINZENTO               ;se for Cinzento, muda para vermelho.
JZ por_semaforo_vermelho

por_semaforo_cinzento:
MOV R8, CINZENTO
JMP escrever_o_valor_do_semaforo8F

por_semaforo_vermelho2:
MOV R8, VERMELHO

escrever_o_valor_do_semaforo8F:
CALL escrever_semaforo

fim_semaforos8F:
POP R4
POP R3
POP R2
POP R1
POP R0
RET

;****************************************************************************************************************************
;agulhas
;****************************************************************************************************************************
; Processo responsavel por alterar os valores das agulhas consoante os botoes botoes de pressao 0-3
;
; Rotinas Auxiliares: 
; ver_agulhas: calcula o valor a colocar na agulha 
; proximo_botao_agulhas: passamos ao proximo botao ao fazer shift do valor para a direita e acrescentamos 1 ao contador
; escrever_agulhas: escreve nas agulhas e na tabela os estados das agulhas
;
; R0: valor no endereCo dos botoes de pressao
; R1: endereCo dos Botoes de Pressao
; R2: - 
; R3: e o endereCo onde vamos escrevever os valores para alterar o estado das agulhas
; R4: e um contador que usamos para podermos ver de que agulha estamos a tratar conforme o numero de shifts feitos
; R5: endereco das tabelas com os estados das agulhas
; R7: temporario que esta 2 bits a esquerda para estar na posicao das agulhas para se escrever
; R8: valor temporario com o estado em que esteva a agulha 
;****************************************************************************************************************************

agulhas:

PUSH R0
PUSH R1
PUSH R2
PUSH R3
PUSH R4

MOV R1, BOTOES_PRESSAO
MOV R3, AGULHAS
MOV R4, 0H                          ; iniciarlizar o contador a 0 
MOVB R0, [R1]                       ; mover os valores dos botoes de pressao para R1

CMP R0, 0
JZ fim_agulhas                      ;se for 0 entao nao ha valores para atribuir

ler_botoes_pressao:
BIT R0,0                            ;testar o bit 0 corresponde a ver se o botao foi carregado 
JNZ mudar_agulha                    ;se estiver a 1 o bit o botao foi premido entao vamos mudar o estado
CALL proximo_botao_agulhas          ;caso contrario passamos ao proximo botao 
JMP ler_botoes_pressao

mudar_agulha:
CALL ver_agulhas

ver_estado_da_tabela:
MOVB R8, [R5]
CMP R8, DIREITA                     ;se estiver para a direita, muda para esquerda
JZ por_agulha_esquerda

por_agulha_direita:
MOV R8, DIREITA
JMP escrever_o_valor_do_agulhas

por_agulha_esquerda:
MOV R8, ESQUERDA

escrever_o_valor_do_agulhas:
CALL escrever_agulhas
RET

fim_agulhas:
POP R4
POP R3
POP R2
POP R1
POP R0
RET

;*******************************************************************************************************************************
; Rotinas auxiliares as agulhas
;*******************************************************************************************************************************
ver_agulhas:
PUSH R4
MOV R5, estados_agulhas     ; movemos o endereço dos estados_agulhas (tabela) para o R5
ADD R5, R4                  ; somamos o numero de bit que contamos para saber o agulha a qual aceder
MOV R7, R4                  ; guardar o valor de R4 
SHL R7, 2                   ; shift em 2 bits do valor de que era R4 para se poder escrever na agulha como numero do agulha
POP R4
RET

proximo_botao_agulhas:
ADD R4, 1H                   ;incrementar 1 ao contador
SHR R0, 1                    ;rodamos para passar ao proximo bit para testar
RET

escrever_agulhas:
MOVB [R5], R8                ;escrever na tabela o estado atribuido 
ADD R7, R8                   ;decide a posiCao para que vai mudar
MOVB [R3], R7                ;escreve na agulha
RET


;**********************************************************************************************************************************
; Sensores
;**********************************************************************************************************************************
sensores:
PUSH R0
PUSH R1
PUSH R2
PUSH R3
PUSH R4

MOV R1, INFORMACAO_SENSORES
MOV R2, LCD_SUPERIOR
MOV R3, LCD_INFERIOR

MOVB R5, [R1]               ;1º byte (informação sobre o comboio que passou)
MOVB R6, [R1]


MOV R0, 30H
ADD R6,R0

BIT R5, 0
JZ sensor_comboio_0

sensor_comboio_1:
MOVB [R2], R6
JMP fim_sensores

sensor_comboio_0:
MOVB [R3], R6

fim_sensores:
POP R4
POP R3
POP R2
POP R1
POP R0
RET
